#!/usr/bin/env python

"""
script: extractBGCs.py
description: extract BGCs categories from BiG-SCAPE

author: Felipe Vaz Peres
file: https://github.com/felipevzps/seabed-symphony/blob/main/workflow/bin/extractBGCs.py
version: 1.0
license: MIT

usage:
    python extractBGCs.py --i run_data.js --o bgc_count.tsv
"""

import json
import pandas as pd
import argparse

parser= argparse.ArgumentParser(description='extract BGCs categories from BiG-SCAPE run_data.js')
parser.add_argument('--i', '-input', dest="filename", metavar='run_data.js', type=str, help='JSON data from JS file generated by BiG-SCAPE', required=True)
parser.add_argument('--o', '-output', dest="output", metavar='bgc_count.tsv', type=str, help='name for output file containing BGCs categories', required=True)
args= parser.parse_args()

filename = args.filename
output = args.output

# extract the run_data object from the file (js object with bigscape results)
def extract_run_data(filename):
    with open(filename) as dataFile:
        data = dataFile.read()
        obj = data[data.find('{'): data.rfind('}') + 1]
        jsonObj = json.loads(obj)
        return jsonObj

# extract the run_data object
run_data = extract_run_data(filename)

# create a dataFrame to store the data
data = {class_obj["label"]: [0] * len(run_data["input"]["accession"]) for class_obj in run_data["input"]["classes"]}
data["genome"] = [accession["label"] for accession in run_data["input"]["accession"]]
df = pd.DataFrame(data)

# fill the table with the count of BGCs for each genome
for bgc in run_data["input"]["bgc"]:
    bgc_genome_id = bgc["acc"]                                      # ID of the genome associated with the BGC
    bgc_class = bgc["class"]                                        # class of the BGC
    class_label = run_data["input"]["classes"][bgc_class]["label"]  # label of the BGC class
    
    # find the label of the genome associated with the BGC
    bgc_genome_label = None
    for accession in run_data["input"]["accession"]:
        if accession["id"] == f"genome_{bgc_genome_id}":
            bgc_genome_label = accession["label"]
            break
    
    # if the genome label is found, update the count in the table
    if bgc_genome_label:
        df.loc[df["genome"] == bgc_genome_label, class_label] += 1
    else:
        print("Genome label not found for BGC:", bgc)

#print(df)

df.to_csv(output, sep='\t', index=False)
print("File saved successfully:", output)

# print the sum of each BGC category
print("\nSum of each category:")
for column in df.columns[:-1]: 
    print(f"{column}: {df[column].sum()}")
    
total_sum = df.iloc[:, :-1].sum().sum() 
print(f"Total: {total_sum}")
